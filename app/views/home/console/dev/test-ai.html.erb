<!DOCTYPE html>
<html>
<head>
    <title>ASR Test</title>
    <meta charset="utf-8" />
</head>
<body style="font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px;">
    <div id="warning">
        <h1 style="font-weight:500;">Speech Recognition SDK not found.</h1>
        <h2 style="font-weight:500;">Please execute <code>npm run bundle</code> and reload.</h2>
    </div>
    <div id="content" style="display:none">
        <table width="100%">
            <tr>
                <td></td>
                <td>
                    <h1 style="font-weight:500;">Microsoft ASR Streaming</h1>
                </td>
            </tr>
            <tr>
                <td align="right">Language:</td>
                <td align="left">
                    <select id="languageOptions">
                        <option value="en-US" selected="selected">English - US</option>
                        <option value="ja-JP">Japanese - JP</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <button id="recBtn" disabled="disabled">Start</button>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <table>
                        <tr>
                            <td>Results:</td>
                        </tr>
                        <tr>
                            <td>
                                <textarea id="phraseDiv" style="display: inline-block;width:750px;height:250px"></textarea>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td align="right">Status:</td>
                <td align="left"><span id="statusDiv"></span></td>
            </tr>
        </table>


        <table width="100%">
            <tr>
                <td></td>
                <td>
                    <h1 style="font-weight:500;">Natural Language Processing</h1>
                </td>
            </tr>
            <tr>
                <td align="right">Language:</td>
                <td align="left">
                    <select id="langNLP">
                        <option value="en-US" selected="selected">English - US</option>
                        <option value="ja-JP">Japanese - JP</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td align="right">Input: </td>
                <td>
                    <textarea id="inputDiv" style="display: inline-block;width:750px;height:30px"></textarea>
                </td>
            </tr>
            <tr height=30>
                <td></td>
                <td>
                    <button id="nlpBtn">Process</button>
                </td>
            </tr>

        </table>

        <table
          width="100%"
          id="resultsTable"
          border="1"
          borderColor="black"
          cellPadding=8
          cellSpacing=0
          align="center"
          ~~~
          style="table-layout:fixed;"
        >
            <tr>
                <td align="center" style="width:10%;">No.</td>
                <td align="center" style="width:25%;">Input</td>
                <td align="center" style="width:25%;">
                  MS Entity (Type)
                </td>
                <td align="center" style="width:25%;">
                  GCP Entity (Type)
                </td>
            </tr>
        </table>
    </div>

    <%= javascript_include_tag 'ai-test-manifest', 'data-turbolinks-track': 'reload'  %>

    <!-- Browser Hooks -->
    <script>
        var recBtn, hypothesisDiv, phraseDiv, statusDiv;
        var key, languageOptions, formatOptions, recognitionMode, inputSource, filePicker;
        var SDK;
        var recognizer;
        var previousSubscriptionKey;
        var result;
        var timeout_counter = 0;
        var recognize_counter = 0;

        var offMicPhrase = 'Start';
        var onMicPhrase = 'Stop';
        // var onMicPhrase = '<b>Stop</b> to press here';
        var isActive = false; // セッションアラート対策


        document.addEventListener("DOMContentLoaded", function () {
            recBtn = document.getElementById("recBtn");
            recBtn.innerHTML = offMicPhrase

            phraseDiv = document.getElementById("phraseDiv");
            hypothesisDiv = document.getElementById("hypothesisDiv");
            statusDiv = document.getElementById("statusDiv");
            languageOptions = document.getElementById("languageOptions");

            languageOptions.addEventListener("change", function () {
              if (isActive){
                Setup();
                RecognizerStart(SDK, recognizer);
              }
            });

            key = '<%= @MS_ASR_KEY %>';
            formatOptions = "Simple";
            inputSource = "Mic";
            recognitionMode = "Conversation";


            recBtn.addEventListener("click", function () {


              if (isActive){

                killMic();

              } else {

                activateMic();

              }

            });

            Initialize(function (speechSdk) {
                SDK = speechSdk;
                recBtn.disabled = false;
            });

        });

        function Setup() {
            if (recognizer != null) {
                RecognizerStop(SDK, recognizer);
            }
            recognizer = RecognizerSetup(SDK, recognitionMode, languageOptions.value, SDK.SpeechResultFormat[formatOptions], key);
        }

        function UpdateStatus(status) {
            statusDiv.innerHTML = status;
        }

        // function UpdateRecognizedHypothesis(text, append) {
        //     if (append)
        //         hypothesisDiv.innerHTML += text + " ";
        //     else
        //         hypothesisDiv.innerHTML = text;
        //
        //     var length = hypothesisDiv.innerHTML.length;
        //     if (length > 403) {
        //         hypothesisDiv.innerHTML = "..." + hypothesisDiv.innerHTML.substr(length-400, length);
        //     }
        // }

        function OnSpeechEndDetected() {
          console.log('SpeechEnd Detected');
        }

        function UpdateRecognizedPhrase(json) {
          console.log('UpdateRecognizedPhrase');
          console.log(json)

            if(json.RecognitionStatus == "Success"){

              result = json.DisplayText;

              phraseDiv.innerHTML += result + '\n\n';

              console.log(JSON.stringify(json));

            } else if(json.RecognitionStatus == "InitialSilenceTimeout"){

              timeout_counter += 1;
              recognize_counter += 1;
              console.log('15 seconds silense Timeout');
              console.log('Timeout Counter : '+timeout_counter);
              console.log('Timeout Counter : '+recognize_counter);

              if (isActive){ activateMic(); }

            } else {

              console.log('No transcript');
              console.log(JSON.stringify(json));

            }
        }

        function OnComplete() {
            // recBtn.disabled = false;
            // stopBtn.disabled = true;
        }

        function activateMic() {
          console.log('activate Mic')
          if (!recognizer) {
              Setup();
          }
          recBtn.innerHTML = onMicPhrase;
          isActive = true;
          RecognizerStart(SDK, recognizer);
        }

        function killMic() {
          console.log('kill Mic')

          recBtn.innerHTML = offMicPhrase;
          RecognizerStop(SDK, recognizer);
          isActive = false;

        }

        function errorHandler() {
          alert("Session Timeout. Please Restart.");
          killMic();
        }
    </script>
</body>
</html>
