<head>
  <meta charset="utf-8">
  <title>Transparent</title>
  <meta name="description" content="Transparent, the first audio recognition tool that serves a stream of content that follows your verbal conversation.">
  <meta name="keywords" content="Transparent">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="mobile-web-app-capable" content="yes">
  <meta property="og:title" content="Transparent">
  <meta property="og:site_name" content="Transparent">
  <meta property="og:description" content="Transparent, the first audio recognition tool that serves a stream of content that follows your verbal conversation.">
  <meta property="og:url" content="http://trnspt.com/">
  <meta property="og:image" content="https://res.cloudinary.com/negic/image/upload/v1520401274/og.png">
  <meta property="og:type" content="website">
  <link rel="shortcut icon" href="https://res.cloudinary.com/negic/image/upload/v1520401272/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="http://trnspt.com/">

<!-- ↓↓↓　バックエンド編集分　↓↓↓ -->

  <!-- <link rel="stylesheet" href="./assets/css/app.css"> -->
  <%= stylesheet_link_tag    'front-alpha', media: 'all', 'data-turbolinks-track': 'reload' %>

  <style rel="stylesheet">
    /* コメントカード */
    #transparent-container .keyword-area .media-container .post-keyword {
        border: 4px solid #f9c03c;
        background-color: #fff;
        color: #f9c03c;
        font-size: 30px;
        line-height: 1.4;
    }

    /* 画像コンテンツ */
    #transparent-container .keyword-area .media-container .post-media .txt {
        font-size: 12px;
        line-height: 1.4;
        color: #767676;
    }
  </style>

</head>
<body class="<%= @language_code[0, 2] %>">

<body class="ja">
  <div id="wrapper">
    <header id="global-header">
      <h1 id="logo" class="logo01">transparent</h1>
      <button id="btn-menu" class="btn-menu01 tap is-active">
        <div class="btn-inner"><span class="line line-1"></span><span class="line line-2"></span><span class="line line-3"></span></div>
      </button>
      <div id="btn-recording" class="btn-recording rec"><span class="r1">Recording</span><span class="r2">REC</span>
        <div class="loader"></div>
      </div>
      <p class="txt-recording"></p>
    </header>
    <div id="global-menu" class="is-active">
      <div class="inner">
        <form class="form-keyword">
          <p class="tit">Keyword Filtering</p>
          <input type="text" placeholder="Input Keyword" class="input-keyword">
          <button id="input-submit" class="input-submit">Submit</button>
        </form>
        <div class="keyword-list">
        </div>
        <div class="setting-btn-area">
          <p class="tit">Title / Description</p>
          <div id="txt-toggle" class="btn-toggle01 on-txt-hidden">
            <div class="toggle"><span class="on">On</span><span class="off">Off</span></div>
          </div>
        </div>
        <div class="setting-btn-area">
          <p class="tit">Comment Card</p>
          <div id="comment-toggle" class="btn-toggle01 on-card-hidden">
            <div class="toggle"><span class="on">On</span><span class="off">Off</span></div>
          </div>
        </div>
        <div class="setting-btn-area">
          <p class="tit">Media</p>
          <div id="on-switch-media" class="btn-toggle02 on-switch-media">
            <div id="btn-image" data-type="0" class="media photo is-active">Photo</div>
            <div id="btn-webpage" data-type="1" class="media news">News</div>
            <div id="btn-video" data-type="2" class="media movie">Movie</div>
          </div>
        </div>
      </div>
    </div>
    <div id="transparent-container" class="menu-is-active">
    </div>
  </div>

  <script>
    var TRANSCRIPTS = [];
  </script>

  <div id="warning">
      <h2 style="display:none">Speech Recognition SDK not found.</h1>
      <h2 style="display:none">Please execute <code>npm run bundle</code> and reload.</h2>
  </div>
  <div id="content" style="display:none">
  </div>

  <%= javascript_include_tag 'front-alpha-manifest', 'data-turbolinks-track': 'reload'  %>

  <script>
    var wall_id = <%= @wall_id %>;
    var searches = [];
    var related_contents = [];
    var search_last_index;
    var search_first_index;
    var related_content_last_index;
    var is_loading = false;

    var menu_hidden = false;
    var text_hidden = false;
    var comment_hidden = false;

    // function fetchContents(){
    //   var instance = axios.create({
    //     baseURL: '/api',
    //     headers: {
    //       'ContentType': 'application/json'
    //     },
    //     responseType: 'json'
    //   });
    //   instance.get('/transcripts/' + wall_id ).then(function (response){
    //
    //     init_setting.bind(this);
    //
    //     return response
    //
    //   }).then(function (response){
    //
    //     searches = response.data.searches;
    //     related_contents = response.data.related_contents;
    //     search_last_index = response.data.search_last_index;
    //     search_first_index = response.data.search_first_index;
    //     related_content_last_index = response.data.related_content_last_index;
    //
    //     TRANSCRIPTS.appendContents({ searches, related_contents });
    //
    //   }, function (error) {
    //       console.log(error);
    //   }).then(function (response){
    //     loadContents();
    //   });
    // }

    function fetchContents(){
      var instance = axios.create({
        baseURL: '/api',
        headers: {
          'ContentType': 'application/json'
        },
        responseType: 'json'
      });
      instance.get('/transcripts/' + wall_id ).then(function (response){

        searches = response.data.searches;
        related_contents = response.data.related_contents;
        search_last_index = response.data.search_last_index;
        search_first_index = response.data.search_first_index;
        related_content_last_index = response.data.related_content_last_index;

        TRANSCRIPTS.appendContents({ searches, related_contents });

      }, function (error) {
        console.log(error);
      }).then(function (response){
        loadContents();
      });
    }

    function loadContents(){
      var instance = axios.create({
        baseURL: '/api',
        headers: {
          'ContentType': 'application/json'
        },
        responseType: 'json'
      });
      // console.log('send req with index : ' + search_last_index + ', ' + related_content_last_index);
      instance.get('/transcripts/' + wall_id + '/' + search_last_index + '/' + related_content_last_index ).then(function (response){
        // console.log(response.data);

        search_last_index = response.data.search_last_index;
        related_content_last_index = response.data.related_content_last_index;

        searches = response.data.searches;
        if (searches.length){
          console.log(searches);
          related_contents = [];
          TRANSCRIPTS.prependContents({ searches, related_contents });
        }

        related_contents = response.data.related_contents;
        if (related_contents.length){
          console.log(related_contents);
          TRANSCRIPTS.addContents(related_contents);
        }

      }, function (error) {
        console.log(error);
      }).then(function (response){
        loadContents();
      });

    }

    function loadPastContents(){
      is_loading = true;
      var instance = axios.create({
        baseURL: '/api',
        headers: {
          'ContentType': 'application/json'
        },
        responseType: 'json'
      });
      instance.get('/transcripts/' + wall_id + '/' + search_first_index).then(function (response){

        searches = response.data.searches;
        related_contents = response.data.related_contents;
        search_first_index = response.data.search_first_index;

        TRANSCRIPTS.appendContents({ searches, related_contents });

      }, function (error) {
        console.log(error);
      }).then(function (response){
        is_loading = false;
      });

    }

    function deleteSearch(search_id){

      var instance = axios.create({
        baseURL: '/api',
        headers: {'ContentType': 'application/json'},
        responseType: 'json'
      });
      instance.get('/update/searches/' + search_id).then(function (response){
        console.log("relatedContentId: ", search_id);
      }, function (error) {
        console.log(error);
      });

    }

    function deleteContents(related_content_id){

      var instance = axios.create({
        baseURL: '/api',
        headers: {'ContentType': 'application/json'},
        responseType: 'json'
      });
      instance.get('/update/contents/' + related_content_id).then(function (response){
        console.log("relatedContentId: ", related_content_id);
      }, function (error) {
        console.log(error);
      });

    }

    function getCookieArray(){
      var arr = new Array();
      if(document.cookie != ''){
        var tmp = document.cookie.split('; ');
        for(var i=0;i<tmp.length;i++){
          var data = tmp[i].split('=');
          arr[data[0]] = decodeURIComponent(data[1]);
        }
      }
      return arr;
    }

    function init_setting(){
      console.log( 'cookies' );
      var cookies = getCookieArray();
      console.log( cookies );

      if (cookies['menu_hidden'] == 'true') {
        document.getElementById('btn-menu').click();
      }

      if (cookies['text_hidden'] == 'true') {
        document.getElementById('txt-toggle').click();
      }

      if (cookies['comment_hidden'] == 'true') {
        document.getElementById('comment-toggle').click();
      }

      if (cookies['media_type'] == '1'){
        document.getElementById('btn-webpage').click();
      }else if (cookies['media_type'] == '2') {
        document.getElementById('btn-video').click();
      }

    };

    // window.addEventListener('load', init_setting.bind(this), false);

    window.addEventListener('load', function() {
        fetchContents();
    }, false);

  </script>

  <script>
    document.getElementById('btn-menu').addEventListener('click', function() {

        setTimeout(function() {

            menu_hidden = !menu_hidden;
            if(menu_hidden) {
              var dimensionValue = 'off';
            }else {
              var dimensionValue = 'on';
            }

            document.cookie = 'menu_hidden=' + menu_hidden

            if(ga === undefined) {
              console.log('undefined');
            }else {
              ga('set', 'dimension5', dimensionValue);
            };

        });

    }, false);

    document.getElementById('input-submit').addEventListener('click', function() {
        setTimeout(function() {

            // 検索キーワードの取得
            console.log(TRANSCRIPTS.getKeywords());
        });
    }, false);

    document.getElementById('txt-toggle').addEventListener('click', function() {
        setTimeout(function() {

            text_hidden = !text_hidden;
            if(text_hidden) {
              var dimensionValue = 'off';
            }else {
              var dimensionValue = 'on';
            }
            document.cookie = 'text_hidden=' + text_hidden

            if(ga === undefined) {
              console.log('undefined');
            }else {
              ga('set', 'dimension1', dimensionValue);
            };

        });
    }, false);

    document.getElementById('comment-toggle').addEventListener('click', function() {
        setTimeout(function() {

            comment_hidden = !comment_hidden;
            if(comment_hidden) {
              var dimensionValue = 'off';
            }else {
              var dimensionValue = 'on';
            }

            document.cookie = 'comment_hidden=' + comment_hidden

            if(ga === undefined) {
              console.log('undefined');
            }else {
              ga('set', 'dimension2', dimensionValue);
            };

        });
    }, false);

    document.getElementById('on-switch-media').addEventListener('click', function() {
        setTimeout(function() {

            // メディアのタイプの取得
            media_type = TRANSCRIPTS.getMediaType()
            console.log(media_type);
            document.cookie = 'media_type=' + media_type

            if(media_type==0) {
              var dimensionValue = 'image';
            }else if (media_type==1) {
              var dimensionValue = 'webpage';
            }else if (media_type==2) {
              var dimensionValue = 'video';
            };

            if(ga === undefined) {
              console.log('undefined');
            }else {
              ga('set', 'dimension3', dimensionValue);
            };

        });
    }, false);

    $('#wrapper').on('click', '#transparent-container .btn-close02', function(event) {
        setTimeout(function() {

            search_id = $(event.currentTarget).closest('.grid-item').attr('data-searchId')
            related_content_id = $(event.currentTarget).closest('.grid-item').attr('data-relatedContentId')

            if (related_content_id){
                deleteContents(related_content_id)
            } else {
                deleteSearch(search_id)
            }

        }, 100);
    });

    window.addEventListener('scroll', function() {

        // スクロールが下部に来たらtrueを返します
        console.log(TRANSCRIPTS.getScrollBottomPosition());

        if (TRANSCRIPTS.getScrollBottomPosition()) {

          if (!is_loading) {
            loadPastContents();
          };

        };

    }, false);

  </script>

  <!-- Browser Hooks -->
  <script>
      var recBtn;
      var key, languageOptions, formatOptions, recognitionMode, inputSource, filePicker;
      var SDK;
      var recognizer;
      var previousSubscriptionKey;
      var result;
      var timeout_counter = 0;
      var recognize_counter = 0;
      var language_code = '<%= @language_code %>';
      // var isActive = false; // セッションアラート対策

      document.addEventListener("DOMContentLoaded", function () {
          recBtn = document.getElementById("btn-recording");

          key = '<%= @MS_ASR_KEY %>';
          languageOptions = language_code;
          formatOptions = "Simple";
          inputSource = "Mic";
          recognitionMode = "Conversation";

          recBtn.addEventListener("click", function () {

            setTimeout(function() {

              if (TRANSCRIPTS.getRecordingStatus()){

                killMic();
                var dimensionValue = 'off';

              } else {

                activateMic();
                var dimensionValue = 'on';

              }

              if(ga === undefined) {
                console.log('undefined');
              }else {
                ga('set', 'dimension4', dimensionValue);
              };
              // TRANSCRIPTS.toggleRecordhing();

            });

          });

          Initialize(function (speechSdk) {
              SDK = speechSdk;
          });

      });

      function sleepByPromise(sec) {
           return new Promise(resolve => setTimeout(resolve, sec*1000));
       }

      function postTranscript(text) {
        var FacebookID = 'guest_x';
        var post_url = '/api/transcripts';
        var with_words = TRANSCRIPTS.getKeywords();
        var search_type = TRANSCRIPTS.getMediaType();
        var UI_version = 'alpha';

        var body = {
                'transcript' : text,
                'FacebookID' :  FacebookID,
                'langcode' : language_code,
                'wallID' : wall_id,
                'clientID' : FacebookID,
                'search_type' : search_type,
                'with_words' : with_words,
                'UI_version' : UI_version
            };

        console.log(body)

        var xmlHttp = new XMLHttpRequest();

        xmlHttp.open("POST", post_url);
        xmlHttp.setRequestHeader( 'Content-Type', 'application/json' )
        xmlHttp.onreadystatechange = async function() {

            await sleepByPromise(2)
            if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
              TRANSCRIPTS.setRecordingText('');
            }

        };
        xmlHttp.send(JSON.stringify(body));
        console.log(xmlHttp.response);

      }

      function Setup() {
          if (recognizer != null) {
              RecognizerStop(SDK, recognizer);
          }
          recognizer = RecognizerSetup(SDK, recognitionMode, languageOptions, SDK.SpeechResultFormat[formatOptions], key);
      }

      function UpdateStatus(status) {
          console.log(status);
      }

      function OnSpeechEndDetected() {
          // stopBtn.disabled = true;
      }

      function UpdateRecognizedPhrase(json) {
        console.log('UpdateRecognizedPhrase');
        console.log(json)

          if(json.RecognitionStatus == "Success"){

            result = json.DisplayText;
            TRANSCRIPTS.setRecordingText(result);

            postTranscript(json.DisplayText)
            console.log(JSON.stringify(json));
            timeout_counter = 0;
            recognize_counter += 1;
            if (recognize_counter == 240){

              errorHandler();
              killMic();

            }

          } else if(json.RecognitionStatus == "InitialSilenceTimeout"){

            timeout_counter += 1;
            recognize_counter += 1;
            console.log('15 seconds silense Timeout');
            console.log('Timeout Counter : '+timeout_counter);
            console.log('Timeout Counter : '+recognize_counter);

            if (timeout_counter == 24){

              errorHandler();

            } else {

              if (TRANSCRIPTS.getRecordingStatus()){ activateMic(); }

            }

          } else {

            console.log('No transcript');
            console.log(JSON.stringify(json));

          }
      }

      function OnComplete() {
          // startBtn.disabled = false;
          // stopBtn.disabled = true;
      }

      function activateMic() {
        console.log('activate Mic')
        if (!recognizer) {
            Setup();
        }
        isActive = true;
        if (!TRANSCRIPTS.getRecordingStatus()){ TRANSCRIPTS.toggleRecordhing(); }
        RecognizerStart(SDK, recognizer);
      }

      function killMic() {
        console.log('kill Mic')
        isActive = false;
        if (TRANSCRIPTS.getRecordingStatus()){ TRANSCRIPTS.toggleRecordhing(); }
        RecognizerStop(SDK, recognizer);
      }

      function errorHandler() {
        alert("Session Timeout. Please Restart.");
        killMic();
      }
  </script>

</body>
