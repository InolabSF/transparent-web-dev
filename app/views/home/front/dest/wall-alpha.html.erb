<head>
  <title>Transparent</title>
  <%= csrf_meta_tags %>

  <meta charset="utf-8">
  <title>Transparent</title>
  <meta name="description" content="Transparent">
  <meta name="keywords" content="Transparent">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="mobile-web-app-capable" content="yes">
  <meta property="og:title" content="Transparent">
  <meta property="og:site_name" content="Transparent">
  <meta property="og:description" content="Transparent">
  <meta property="og:url" content="">
  <meta property="og:image" content="./assets/img/config/og.png">
  <meta property="og:type" content="website">
  <link rel="shortcut icon" href="http://res.cloudinary.com/negic/image/upload/v1520401272/favicon.ico" type="image/x-icon">
  <link rel="canonical" href="">
  <!-- <link rel="stylesheet" href="./assets/css/app.css"> -->

  <%= stylesheet_link_tag    'front', media: 'all', 'data-turbolinks-track': 'reload' %>

  <style rel="stylesheet">

          /* ここからiPad proのサイズ */

          /* 背景画像 */
          .transparent-container .bg {
              background-image: url('https://res.cloudinary.com/dkzchvgct/image/upload/v1520365053/BG02.png');
              /* background-image: url('https://res.cloudinary.com/dkzchvgct/image/upload/v1520382687/green-screen-picture.jpg'); */
          }

          /* コメントボックスの背景色、文字色、フォントサイズ */
          .transparent-container .post .comment {
              background-color: rgba(234, 83, 80, 0.9);
              color: #fff;
              font-size: 16px;
              width: 333px;
              padding: 40px;
          }

          /* ユーザアイコンの背景色 */
          .transparent-container .post .comment .comment-user-icon {
              background-color: rgba(0, 61, 193, 0.3);
          }

          /* ここからパソコンサイズ */
          @media only screen and (min-width: 1280px) {

              /* コメントボックスの背景色、文字色、フォントサイズ */
              .transparent-container .post .comment {
                  width: 400px;
                  padding: 30px;
                  font-size: 24px;
              }
          }
  </style>

</head>

<body class="page-top">

  <!-- <script>
    var offMicPhrase = '<b>Start</b> to press here';
    var onMicPhrase = '<b>Stop</b> to press here';
  </script> -->


  <div id="warning">
      <h1 style="font-weight:500;">Speech Recognition SDK not found.</h1>
      <h2 style="font-weight:500;">Please execute <code>npm run bundle</code> and reload.</h2>
  </div>
  <div id="content" style="display:none">
  </div>

  <div id="wrapper">

    <div class="transparent-container">

      <div class="bg"></div>
      <!-- <button class="btn-bg-toggle">Switch</button> -->
      <table>
          <tr>
              <td align="right">Status:</td>
              <td align="left"><span id="statusDiv"></span></td>
          </tr>
          <tr>
              <td>
                <button id="startBtn" class="btn-add"></button>
              </td>
          </tr>
      </table>


      <div class="modal-layer">
        <div class="modal-back"></div>
        <div class="modal-inner"></div>
        <button class="btn-close01"></button>
      </div>
    </div>
  </div>

  <script>
    var transcripts_add;

    var MEDIA_MAX_SIZE = 350; // ランダム配置される画像の最大サイズ
    var MEDIA_MIN_SIZE = MEDIA_MAX_SIZE / 2; // ランダム配置される画像の最小サイズ
  </script>

  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script>
  var initial_transcripts = [];
  var index;

  function fetchTranscripts(initial_transcripts, index){
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "/demo/api/transcripts/" + <%= @wall_id %>, false);
    xmlHttp.send();
    data = JSON.parse(xmlHttp.response)
    for(var i = 0; i < data.transcripts.length; i++) {
        initial_transcripts.push(data.transcripts[i]);
    }
    index = data.index
    console.log(index)
    return initial_transcripts, index
  }

  initial_transcripts, index = fetchTranscripts(initial_transcripts, index);

  function loadTranscripts(initial_transcripts, index){
    console.log(index);
    // const axiosBase = require('axios');
    var instance = axios.create({
      baseURL: '/demo',
      headers: {
        'ContentType': 'application/json'
        // 'origin' : 'https://transparent-sxsw-dev.herokuapp.com'
      },
      responseType: 'json'
    });
    console.log('send req with index : ' + index);
    instance.get('/api/transcripts/' + <%= @wall_id %> + '/' + index).then(function (response){
      console.log(response.data);
      transcripts = response.data.transcripts;
      index = response.data.index;

      for(var i = 0; i < transcripts.length; i++) {
          initial_transcripts.unshift(transcripts[i]);
          transcripts_add([transcripts[i]]);
          startBtn.innerHTML = onMicPhrase + '<br> Status : <i>' + 'Recording...' + '</i>';
      }
    }, function (error) {
      console.log(error);
    }).then(function (response){
      loadTranscripts(initial_transcripts, index);
    });
  }
  window.addEventListener('load', loadTranscripts(initial_transcripts, index))

  </script>

  <%= javascript_include_tag 'front-manifest', 'data-turbolinks-track': 'reload'  %>

  <!-- Browser Hooks -->
  <script>
      var startBtn, stopBtn, hypothesisDiv, phraseDiv, statusDiv;
      var key, languageOptions, formatOptions, recognitionMode, inputSource, filePicker;
      var SDK;
      var recognizer;
      var previousSubscriptionKey;
      var isActive = false;
      var result;
      var timeout_counter = 0;
      var recognize_counter = 0;

      var offMicPhrase = '<b>Start</b> to press here' + '<br> Status : <i>' + 'Idle' + '</i>';
      var onMicPhrase = '<b>Stop</b> to press here';


      document.addEventListener("DOMContentLoaded", function () {
          startBtn = document.getElementById("startBtn");
          startBtn.innerHTML = offMicPhrase

          phraseDiv = document.getElementById("phraseDiv");
          hypothesisDiv = document.getElementById("hypothesisDiv");
          statusDiv = document.getElementById("statusDiv");

          key = "ebdf6b84bf604091ad354a65c49775c0";
          languageOptions = '<%= @language_code %>';
          formatOptions = "Simple";
          inputSource = "Mic";
          recognitionMode = "Conversation";

          startBtn.addEventListener("click", function () {


            if (isActive){

              killMic();
                // startBtn.innerHTML = offMicPhrase;
                // RecognizerStop(SDK, recognizer);
                // isActive = false;
            } else {

              activateMic();
              // if (!recognizer) {
              //     Setup();
              // }
              //
              // startBtn.innerHTML = onMicPhrase;
              // isActive = true;
              // RecognizerStart(SDK, recognizer);

            }

          });

          // stopBtn.addEventListener("click", function () {
          //     RecognizerStop(SDK, recognizer);
          //     startBtn.disabled = false;
          //     stopBtn.disabled = true;
          // });

          Initialize(function (speechSdk) {
              SDK = speechSdk;
              startBtn.disabled = false;
          });

          // loadTranscripts(initial_transcripts, index)
      });

      function createCORSRequest(method, url) {
        var xhr = new XMLHttpRequest();
        if ("withCredentials" in xhr) {
          // XHR for Chrome/Firefox/Opera/Safari.
          xhr.open(method, url, false);
        } else if (typeof XDomainRequest != "undefined") {
          // XDomainRequest for IE.
          xhr = new XDomainRequest();
          xhr.open(method, url);
        } else {
          // CORS not supported.
          xhr = null;
        }
        return xhr;
      }


      function postTranscript(text) {
        // var API_KEY = 'P2ysni7WOO8DcPtvIa2sY7gRvyN6QfRz7vDkELYC';
        var language_code = '<%= @language_code %>';
        var wallID = <%= @wall_id %>;
        var FacebookID = 'guest_x';
        var post_url = '/api/transcripts';

        var body = {
                'transcript' : text,
                'FacebookID' :  FacebookID,
                'langcode' : language_code,
                'wallID' : wallID,
                'clientID' : FacebookID,
                'search_type' : 1,
                'with_words' : [],
                'UI_version' : 'alpha'
            };

        console.log(body)

        var xmlHttp = new XMLHttpRequest();

        xmlHttp.open("POST", post_url);
        // var xmlHttp = createCORSRequest('POST', post_url);

        xmlHttp.setRequestHeader( 'Content-Type', 'application/json' )
        // xmlHttp.setRequestHeader( 'x-api-key', API_KEY )

        xmlHttp.send(JSON.stringify(body));
        console.log(xmlHttp.response)

      }

      function Setup() {
          if (recognizer != null) {
              RecognizerStop(SDK, recognizer);
          }
          recognizer = RecognizerSetup(SDK, recognitionMode, languageOptions, SDK.SpeechResultFormat[formatOptions], key);
      }

      function UpdateStatus(status) {
          statusDiv.innerHTML = status;
      }

      // function UpdateRecognizedHypothesis(text, append) {
      //     if (append)
      //         hypothesisDiv.innerHTML += text + " ";
      //     else
      //         hypothesisDiv.innerHTML = text;
      //
      //     var length = hypothesisDiv.innerHTML.length;
      //     if (length > 403) {
      //         hypothesisDiv.innerHTML = "..." + hypothesisDiv.innerHTML.substr(length-400, length);
      //     }
      // }

      function OnSpeechEndDetected() {
          // stopBtn.disabled = true;
      }

      function UpdateRecognizedPhrase(json) {
        console.log('UpdateRecognizedPhrase');
        console.log(json)

          if(json.RecognitionStatus == "Success"){

            result = json.DisplayText;
            startBtn.innerHTML = onMicPhrase + '<br> <i>' + result + '</i>';
            postTranscript(json.DisplayText)
            console.log(JSON.stringify(json));
            timeout_counter = 0;
            recognize_counter += 1;
            if (recognize_counter == 120){

              errorHandler();
              killMic();

            }

          } else if(json.RecognitionStatus == "InitialSilenceTimeout"){

            timeout_counter += 1;
            recognize_counter += 1;
            console.log('15 seconds silense Timeout');
            console.log('Timeout Counter : '+timeout_counter);
            console.log('Timeout Counter : '+recognize_counter);

            if (timeout_counter == 12){

              errorHandler();

            } else {
              activateMic();
            }

          } else {

            console.log('No transcript');
            console.log(JSON.stringify(json));

          }
      }

      function OnComplete() {
          // startBtn.disabled = false;
          // stopBtn.disabled = true;
      }

      function activateMic() {
        console.log('activate Mic')
        if (!recognizer) {
            Setup();
        }
        startBtn.innerHTML = onMicPhrase + '<br> Status : <i>' + 'Recording...' + '</i>';
        isActive = true;
        RecognizerStart(SDK, recognizer);
      }

      function killMic() {
        console.log('kill Mic')

        startBtn.innerHTML = offMicPhrase;
        RecognizerStop(SDK, recognizer);
        isActive = false;

      }

      function errorHandler() {
        alert("Session Timeout. Please Restart.");
        killMic();
      }
  </script>

</body>
