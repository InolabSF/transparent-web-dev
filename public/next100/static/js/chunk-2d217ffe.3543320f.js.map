{"version":3,"sources":["webpack:///./node_modules/hammerjs/hammer.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","window","document","exportName","undefined","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","this","arguments","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","MOBILE_REGEX","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","createInputInstance","Type","inputClass","PointerEventInput","TouchInput","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","v","clientX","clientY","p1","p2","props","sqrt","atan2","PI","start","end","evEl","evTarget","evWin","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","isSyntheticEvent","t","dx","dy","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","getTouchActionProps","TouchAction","value","set","cleanTouchActions","actions","hasPanX","hasPanY","touchMap","cssSupports","CSS","supports","compute","update","touchAction","recognizers","recognizer","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","STATE_FAILED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","handlers","oldCssProps","toggleCssProps","item","add","triggerDomEvent","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","stop","force","stopped","curRecognizer","existing","remove","on","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal","exports","__webpack_require__","module"],"mappings":"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","file":"static/js/chunk-2d217ffe.3543320f.js","sourcesContent":["/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n"],"sourceRoot":""}